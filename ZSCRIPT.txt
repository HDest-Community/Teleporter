version "4.0"

class HDTeleportHandler : EventHandler
{
	Array<HDBeacon> Beacons;

	override void NetworkProcess(ConsoleEvent e)
	{
		let plr = HDPlayerPawn(players[e.Player].mo);
		if (!plr)
		{
			return;
		}

		bool Alive = plr.Health > 0;

		if (Alive && e.Name ~== "HDT_ListBeacons")
		{
			int BeaconCount = Beacons.Size();
			if (BeaconCount > 0)
			{
				string str = String.Format("You have %i beacons active:", BeaconCount);
				for (int i = 0; i < BeaconCount; ++i)
				{
					vector3 BeaconPos = Beacons[i].pos;
					str = String.Format("%s\nBeacon %i at %i, %i, %i", str, i + 1, BeaconPos.x, BeaconPos.y, BeaconPos.z);
				}
				plr.A_Log(str);
			}
			else
			{
				plr.A_Log("You have no beacons active.");
			}
		}
	}
}

class HDTeleporter : HDPickup
{
	override void BeginPlay()
	{
		BeaconIndex = -1;

		Super.BeginPlay();
	}

	override int GetSbarNum(int flags)
	{
		return BeaconIndex + 1;
	}

	private action void GetFullBatteryIndices(out Array<int> indices)
	{
		indices.Clear();

		let Battery = HDBattery(FindInventory("HDBattery"));
		if (Battery)
		{
			for (int i = 0; i < Battery.Mags.Size(); ++i)
			{
				if (Battery.Mags[i] == Battery.MaxPerUnit)
				{
					indices.Push(i);
				}
			}
		}
	}

	private action void A_CronchBatteries(Array<int> indices, int maxCronch)
	{
		let Battery = HDBattery(FindInventory("HDBattery"));
		if (Battery)
		{
			for (int i = 0; i < indices.Size() && maxCronch > 0; ++i)
			{
				Battery.Mags.Delete(indices[i]);
				Battery.Amount = Battery.Mags.Size();
				maxCronch--;
			}
		}
	}

	const BatteriesToCronch = 1;
	private int BeaconIndex; // [Ace] Zero-based internally, but not on the HUD.

	Default
	{
		+HDPICKUP.CHEATNOGIVE
		+HDPICKUP.NOTINPOCKETS
		+INVENTORY.INVBAR
		HDPickup.Bulk 65;
		Inventory.MaxAmount 5;
		Inventory.Icon "TPRTZ0";
		Inventory.PickupMessage "Picked up a portable teleporter.";
		Tag "Portable Teleporter";
	}

	States
	{
		Spawn:
			TPRT A -1;
			Stop;
		Use:
			TNT1 A 0
			{
				let Handler = HDTeleportHandler(EventHandler.Find("HDTeleportHandler"));
				if (!Handler)
				{
					return false;
				}

				if (player.cmd.buttons & BT_USE)
				{
					if (player.cmd.buttons & BT_ZOOM && invoker.BeaconIndex > -1)
					{
						invoker.BeaconIndex--;
					}
					else
					{
						invoker.BeaconIndex++;
					}
				}
				else if (player.cmd.buttons & BT_ZOOM)
				{
					if (invoker.Amount > 1)
					{
						bool success; Actor a;
						[success, a] = A_SpawnItemEx("HDBeacon", 0, 0, height / 2, 5, flags: SXF_SETMASTER | SXF_TRANSFERTRANSLATION);
						Handler.Beacons.Push(HDBeacon(a));
						invoker.Amount--;
					}
					else
					{
						A_Log("Cannot use your last teleporter as a beacon.");
					}
				}
				else if (invoker.BeaconIndex > -1 && invoker.BeaconIndex < Handler.Beacons.Size())
				{
					Array<int> BatteryIndices;
					GetFullBatteryIndices(BatteryIndices);
					if (BatteryIndices.Size() >= BatteriesToCronch)
					{
						let Beacon = Handler.Beacons[invoker.BeaconIndex];
						if (Warp(Beacon))
						{
							for (int i = 0; i < 360; ++i)
							{
								if (!random(0, 1))
								{
									A_SpawnParticle(player.GetColor(), SPF_RELATIVE, random(35, 70), random(2, 4), i, random(8, 48), 0, frandom(0, height), 0, 0, frandom(0.5, 3), 0, 0, frandom(-0.05, 0));
								}
								A_SpawnParticle(player.GetColor(), SPF_RELATIVE, 15, 16, i, 0, 0, 0, 20, 0, 0, -0.8, sizestep: 0.3);
							}
							A_PlaySound("HDTeleporter/Teleport", 20);
							A_CronchBatteries(BatteryIndices, BatteriesToCronch);
						}
						else
						{
							A_Log("Destination is blocked.");
						}
					}
					else
					{
						A_Log("You need a full battery to do that.");
					}
				}
				else
				{
					A_Log("Invalid index. Use 'listbeacons' in console for a list of active beacons.");
				}

				return false;
			}
			Stop;
	}
}

class HDBeacon : HDUPK
{
	override void OnDestroy()
	{
		let Handler = HDTeleportHandler(EventHandler.Find("HDTeleportHandler"));
		if (Handler)
		{
			int ArrayIndex = Handler.Beacons.Find(self);
			if (ArrayIndex != Handler.Beacons.Size())
			{
				Handler.Beacons.Delete(ArrayIndex);
			}
		}

		Super.OnDestroy();
	}

	Default
	{
		HDUPK.PickupType "HDTeleporter";
		HDUPK.PickupMessage "Picked up a portable teleporter.";
	}

	States
	{
		Spawn:
			TPRT A 20;
			TPRT A 0 A_SpawnItemEx("HDBeaconMarker", flags: SXF_SETMASTER | SXF_TRANSFERTRANSLATION);
		SpawnLoop:
			TPRT AB 20;
			Loop;
	}
}

class HDBeaconMarker : MapMarker
{
	override void Tick()
	{
		if (!master)
		{
			Destroy();
			return;
		}

		Super.Tick();
	}

	Default
	{
		+INVISIBLE
		+NOINTERACTION
	}

	States
	{
		Spawn:
			TPRT Z -1;
			Stop;
	}
}